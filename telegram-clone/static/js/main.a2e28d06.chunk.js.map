{"version":3,"sources":["redux/reducers/authReducer.js","redux/reducers/chatsReducer.js","redux/reducers/commonReducer.js","redux/reducers/messagesReducer.js","redux/reducers/uiReducer.js","redux/store.js","components/Shade.jsx","assets/avatars/01.svg","assets/avatars/02.svg","assets/avatars/03.svg","assets/avatars/04.svg","assets/avatars/05.svg","assets/avatars/06.svg","assets/avatars/07.svg","assets/avatars/08.svg","firebase/index.js","components/CreateChatWindow.jsx","hooks/usePrevious.js","components/ChatHeader.jsx","components/MessagesItem.jsx","components/PhotoPreview.jsx","components/SendMessageForm.jsx","components/Chat.jsx","components/Intro.jsx","components/ChatsItem.jsx","components/Sidebar.jsx","components/HomePage.jsx","components/LoginPage.jsx","components/App.jsx","index.jsx"],"names":["authSlice","createSlice","name","initialState","isAuthenticated","user","reducers","login","state","payload","uid","displayName","photoURL","logout","authActions","actions","selectIsAuthenticated","auth","selectUser","chatsSlice","list","selectedChatId","isLoading","setChats","setSelectedChatId","to","setIsLoading","chatsActions","selectChatById","id","chats","find","chat","selectSelectedChatId","selectChatsByNameIncludes","filter","includes","selectIsChatsLoading","commonReducer","searchMessageInputValue","searchChatInputValue","setSearchMessageInputValue","setSearchChatInputValue","commonActions","selectSearchMessageInputValue","common","selectSearchChatInputValue","messagesSlice","setMessages","messagesActions","selectMessages","messages","selectIsMessagesLoading","uiReducer","createChatWindowVisibility","sidebarVisibility","searchMessagePanelVisibility","toggleCreateChatWindowVisibility","toggleSidebarVisibility","toggleSearchMessagePanelVisibility","setSearchMessagePanelVisibility","setSidebarVisibility","uiActions","selectCreateChatWindowVisibility","ui","selectSidebarVisibility","selectSearchMessagePanelVisibility","store","configureStore","reducer","authReducer","chatsReducer","messagesReducer","Shade","props","className","visibility","onClick","db","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getFirestore","getAuth","storage","getStorage","googleProvider","GoogleAuthProvider","mapDispatchToProps","connect","useState","chatNameInputValue","setChatNameInputValue","photo01","selectedPhotoURL","setSelectedPhotoURL","emptyChatNameError","setEmptyChatNameError","chatNameInputRef","useRef","photos","photo02","photo03","photo04","photo05","photo06","photo07","photo08","useEffect","createChat","a","onlineList","lastMessage","addDoc","collection","resetWindow","closeWindow","onSubmit","e","preventDefault","trim","then","result","value","onChange","target","placeholder","ref","map","photo","i","src","type","usePrevious","current","selectedChat","searchMessageInputRef","handlerRef","contains","console","log","removeListener","focus","deleteCurrentChat","deleteDoc","doc","document","removeEventListener","online","index","length","title","URL","setURL","isPhotoLoading","setIsPhotoLoading","photoRef","getDownloadURL","belongsToCurrentUser","text","author","Date","timestamp","getHours","getMinutes","isHidden","onDeletePhotoBtnClick","messageInputValue","setMessageInputValue","submitBtnHidden","setSubmitBtnHidden","fileData","setFileData","isPhotoPreviewHidden","setIsPhotoPreviewHidden","file","setFile","fileInputRef","messageInputRef","showPhotoPreview","hidePhotoPreview","sendMessage","message","createdDate","serverTimestamp","getTime","updateLastMessage","updateDoc","authorDisplayName","uploadBytes","uploadFile","click","hidden","fileInput","reader","FileReader","readAsDataURL","files","onload","readFileData","readFile","previousSelectedChatId","chatBodyRef","q","query","orderBy","unsubscribe","onSnapshot","snapshot","forEach","data","push","arrayUnion","arrayRemove","scrollTo","scrollHeight","isActive","toggleVisibility","filteredChats","searchPanelRef","searchInput","isSearchPanelActive","setIsSearchPanelActive","addEventListener","closeSidebar","signOut","onFocus","signInWithPopup","history","useHistory","onAuthStateChanged","window","alert","path","exact","ReactDOM","render","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.a2e28d06.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState: {\r\n    isAuthenticated: false,\r\n    user: null\r\n  },\r\n  reducers: {\r\n    login(state, { payload }) {\r\n      const { uid, displayName, photoURL } = payload\r\n      state.isAuthenticated = true\r\n      state.user = { uid, displayName, photoURL }\r\n    },\r\n    logout(state, { payload }) {\r\n      state.isAuthenticated = false\r\n      state.user = null\r\n    }\r\n  }\r\n})\r\n\r\n\r\nexport const authActions = authSlice.actions\r\n\r\nexport const selectIsAuthenticated = (state) => {\r\n  return state.auth.isAuthenticated\r\n}\r\n\r\nexport const selectUser = (state) => {\r\n  return state.auth.user\r\n}\r\n\r\nexport default authSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\r\n\r\n\r\nconst chatsSlice = createSlice({\r\n  name: 'chats',\r\n  initialState: {\r\n    list: [\r\n      // { name: 'West', onlineList: ['Daler', 'Aziz'], lastMessage: { text: 'Hello World', authorDisplayName: 'Saidov Daler' }, photoURL: 'https://avatars.dicebear.com/api/big-ears-neutral/:seed.svg', id: 'id001' },\r\n      // { name: 'Inha', onlineList: ['Daler', 'Aziz'], lastMessage: { text: 'Hello World', authorDisplayName: 'Saidov Daler' }, photoURL: 'https://avatars.dicebear.com/api/female/:seed.svg', id: 'id002' },\r\n      // { name: 'GecUz', onlineList: ['Daler', 'Aziz'], lastMessage: { text: 'Hello World', authorDisplayName: 'Saidov Daler' }, photoURL: 'https://avatars.dicebear.com/api/jdenticon/:seed.svg', id: 'id003' },\r\n    ],\r\n    selectedChatId: null,\r\n    isLoading: false\r\n  },\r\n  reducers: {\r\n    setChats(state, { payload }) {\r\n      const { list } = payload\r\n      state.list = list\r\n    },\r\n    setSelectedChatId(state, { payload }) {\r\n      const { to } = payload\r\n      state.selectedChatId = to\r\n    },\r\n    setIsLoading(state, { payload }) {\r\n      const { to } = payload\r\n      state.isLoading = to\r\n    }\r\n  }\r\n})\r\n\r\nexport const chatsActions = chatsSlice.actions\r\n\r\nexport const selectChats = (state) => {\r\n  return state.chats.list\r\n}\r\n\r\nexport const selectChatById = (state, id) => {\r\n  return state.chats.list.find((chat) => chat.id === id)\r\n}\r\n\r\nexport const selectSelectedChatId = (state) => {\r\n  return state.chats.selectedChatId\r\n}\r\n\r\nexport const selectChatsByNameIncludes = (state, name) => {\r\n  return state.chats.list.filter((chat) => chat.name.includes(name))\r\n}\r\n\r\nexport const selectIsChatsLoading = (state) => {\r\n  return state.chats.isLoading\r\n}\r\n\r\nexport default chatsSlice.reducer\r\n","import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\n\r\nconst commonReducer = createSlice({\r\n  name: 'common',\r\n  initialState: {\r\n    searchMessageInputValue: '',\r\n    searchChatInputValue: ''\r\n  },\r\n  reducers: {\r\n    setSearchMessageInputValue(state, { payload }) {\r\n      const { to } = payload\r\n      state.searchMessageInputValue = to\r\n    },\r\n    setSearchChatInputValue(state, { payload }) {\r\n      const { to } = payload\r\n      state.searchChatInputValue = to\r\n    }\r\n  }\r\n})\r\n\r\nexport const commonActions = commonReducer.actions\r\n\r\nexport const selectSearchMessageInputValue = (state) => {\r\n  return state.common.searchMessageInputValue\r\n}\r\n\r\nexport const selectSearchChatInputValue = (state) => {\r\n  return state.common.searchChatInputValue\r\n}\r\n\r\nexport default commonReducer.reducer","import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\n\r\nconst messagesSlice = createSlice({\r\n  name: 'messages',\r\n  initialState: {\r\n    list: [],\r\n    isLoading: false\r\n  },\r\n  reducers: {\r\n    setMessages(state, { payload }) {\r\n      const { list } = payload\r\n      state.list = list\r\n    },\r\n    setIsLoading(state, { payload }) {\r\n      state.isLoading = payload.to\r\n    }\r\n  }\r\n})\r\n\r\nexport const messagesActions = messagesSlice.actions\r\n\r\nexport const selectMessages = (state) => {\r\n  return state.messages.list\r\n}\r\n\r\nexport const selectIsMessagesLoading = (state) => {\r\n  return state.messages.isLoading\r\n}\r\n\r\nexport default messagesSlice.reducer\r\n","import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\n\r\nconst uiReducer = createSlice({\r\n  name: 'ui',\r\n  initialState: {\r\n    createChatWindowVisibility: false,\r\n    sidebarVisibility: false,\r\n    searchMessagePanelVisibility: false\r\n  },\r\n  reducers: {\r\n    toggleCreateChatWindowVisibility(state, { payload }) {\r\n      state.createChatWindowVisibility = !state.createChatWindowVisibility\r\n    },\r\n    toggleSidebarVisibility(state, { payload }) {\r\n      state.sidebarVisibility = !state.sidebarVisibility\r\n    },\r\n    toggleSearchMessagePanelVisibility(state, { payload }) {\r\n      state.searchMessagePanelVisibility = !state.searchMessagePanelVisibility\r\n    },\r\n    setSearchMessagePanelVisibility(state, { payload }) {\r\n      state.searchMessagePanelVisibility = payload.to\r\n    },\r\n    setSidebarVisibility(state, { payload }) {\r\n      state.sidebarVisibility = payload.to\r\n    }\r\n  }\r\n})\r\n\r\nexport const uiActions  = uiReducer.actions\r\n\r\nexport const selectCreateChatWindowVisibility = (state) => {\r\n  return state.ui.createChatWindowVisibility\r\n}\r\n\r\nexport const selectSidebarVisibility = (state) => {\r\n  return state.ui.sidebarVisibility\r\n}\r\n\r\nexport const selectSearchMessagePanelVisibility = (state) => {\r\n  return state.ui.searchMessagePanelVisibility\r\n}\r\n\r\nexport default uiReducer.reducer","import { configureStore } from \"@reduxjs/toolkit\"\r\nimport authReducer from \"./reducers/authReducer\"\r\nimport chatsReducer from \"./reducers/chatsReducer\"\r\nimport commonReducer from \"./reducers/commonReducer\"\r\nimport messagesReducer from \"./reducers/messagesReducer\"\r\nimport uiReducer from \"./reducers/uiReducer\"\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: authReducer,\r\n    ui: uiReducer,\r\n    common: commonReducer,\r\n    chats: chatsReducer,\r\n    messages: messagesReducer\r\n  }\r\n})\r\n\r\nexport default store\r\n","import pt from 'prop-types'\r\n\r\nconst Shade = (props) => {\r\n  return (\r\n    <div\r\n      className={`shade ${!props.visibility && 'shade--hidden'}`}\r\n      onClick={props.onClick}\r\n    />\r\n  )\r\n}\r\n\r\nShade.propTypes = {\r\n  visibility: pt.bool,\r\n  onClick: pt.func\r\n}\r\n\r\nexport default Shade\r\n","export default __webpack_public_path__ + \"static/media/01.4f438702.svg\";","export default __webpack_public_path__ + \"static/media/02.dd463982.svg\";","export default __webpack_public_path__ + \"static/media/03.3990d193.svg\";","export default __webpack_public_path__ + \"static/media/04.499762bc.svg\";","export default __webpack_public_path__ + \"static/media/05.30f23d98.svg\";","export default __webpack_public_path__ + \"static/media/06.6615d830.svg\";","export default __webpack_public_path__ + \"static/media/07.08c6b511.svg\";","export default __webpack_public_path__ + \"static/media/08.4f495ff6.svg\";","import { initializeApp } from \"firebase/app\"\r\nimport { getFirestore } from 'firebase/firestore'\r\nimport { getStorage } from 'firebase/storage'\r\nimport { getAuth, GoogleAuthProvider } from 'firebase/auth'\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDgxSLLfr3A5sLBaWXb1sGuLcW6D__Ht4g\",\r\n  authDomain: \"whatsappclone-6dfe6.firebaseapp.com\",\r\n  projectId: \"whatsappclone-6dfe6\",\r\n  storageBucket: \"whatsappclone-6dfe6.appspot.com\",\r\n  messagingSenderId: \"504293413239\",\r\n  appId: \"1:504293413239:web:80c0a613af0cdfe6401172\"\r\n}\r\n\r\nconst app = initializeApp(firebaseConfig)\r\n\r\nconst db = getFirestore()\r\nconst auth = getAuth()\r\nconst storage = getStorage()\r\n\r\nconst googleProvider = new GoogleAuthProvider()\r\n\r\nexport { db, auth, storage, googleProvider }\r\n","import { useEffect, useRef, useState } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { selectCreateChatWindowVisibility, uiActions } from \"redux/reducers/uiReducer\"\r\nimport Shade from \"./Shade\"\r\n\r\nimport photo01 from 'assets/avatars/01.svg'\r\nimport photo02 from 'assets/avatars/02.svg'\r\nimport photo03 from 'assets/avatars/03.svg'\r\nimport photo04 from 'assets/avatars/04.svg'\r\nimport photo05 from 'assets/avatars/05.svg'\r\nimport photo06 from 'assets/avatars/06.svg'\r\nimport photo07 from 'assets/avatars/07.svg'\r\nimport photo08 from 'assets/avatars/08.svg'\r\n\r\nimport { addDoc, collection } from \"@firebase/firestore\"\r\nimport { db } from \"firebase\"\r\nimport { chatsActions } from \"redux/reducers/chatsReducer\"\r\n\r\n\r\nconst CreateChatWindow = (props) => {\r\n  const [chatNameInputValue, setChatNameInputValue] = useState('')\r\n  const [selectedPhotoURL, setSelectedPhotoURL] = useState(photo01)\r\n  const [emptyChatNameError, setEmptyChatNameError] = useState(false)\r\n\r\n  const chatNameInputRef = useRef(null)\r\n\r\n  const photos = [photo01, photo02, photo03, photo04, photo05, photo06, photo07, photo08]\r\n\r\n  useEffect(() => {\r\n    if (props.visibility) {\r\n      // focusInput()\r\n    }\r\n  }, [props.visibility])\r\n\r\n  const createChat = async () => {\r\n    const chat = {\r\n      name: chatNameInputValue,\r\n      photoURL: selectedPhotoURL,\r\n      onlineList: [],\r\n      lastMessage: null\r\n    }\r\n\r\n    return await addDoc(collection(db, 'chats'), chat)\r\n  }\r\n\r\n  const changeSelectedChatId = (to) => {\r\n    props.setSelectedChatId({ to })\r\n  }\r\n\r\n  const focusInput = () => {\r\n    chatNameInputRef.current?.focus()\r\n  }\r\n\r\n  const resetWindow = () => {\r\n    setChatNameInputValue('')\r\n    setSelectedPhotoURL(photo01)\r\n    setEmptyChatNameError(false)\r\n  }\r\n\r\n  const closeWindow = () => {\r\n    props.toggleCreateChatWindowVisibility()\r\n  }\r\n\r\n  const handleShadeClick = () => {\r\n    resetWindow()\r\n    closeWindow()\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    if (!chatNameInputValue.trim()) {\r\n      setEmptyChatNameError(true)\r\n    } else {\r\n      createChat().then((result) => changeSelectedChatId(result.id))\r\n      resetWindow()\r\n      closeWindow()\r\n    }\r\n  }\r\n\r\n  const handlePhotoItemClick = (e, to) => {\r\n    setSelectedPhotoURL(to)\r\n  }\r\n\r\n  return <>\r\n    <div className={`create-chat-window ${!props.visibility && 'create-chat-window--hidden'}`}>\r\n      <h2 className={'create-chat-window__title h4'}>\r\n        Create Chat\r\n      </h2>\r\n      <form className=\"create-chat-window__form\" onSubmit={handleSubmit}>\r\n        <input\r\n          className={`create-chat-window__chat-name-input ${emptyChatNameError && 'create-chat-window__chat-name-input--error'}`}\r\n          value={chatNameInputValue}\r\n          onChange={(e) => setChatNameInputValue(e.target.value)}\r\n          placeholder=\"Type chat name\"\r\n          ref={chatNameInputRef}\r\n        />\r\n        <ul className=\"create-chat-window__photos-list\">\r\n          {\r\n            photos.map((photo, i) => (\r\n              <li className={`create-chat-window__photos-item`} onClick={(e) => handlePhotoItemClick(e, photo)} key={i}>\r\n                <img src={photo}  className={`create-chat-window__photo ${selectedPhotoURL === photo && '_create-chat-window__photo--selected'}`} />\r\n                <div className={`create-chat-window__selected-label ${!(selectedPhotoURL === photo) && 'create-chat-window__selected-label--hidden'}`}></div>\r\n              </li>\r\n            ))\r\n          }\r\n        </ul>\r\n        <button type=\"submit\" className=\"create-chat-window__submit-btn\">\r\n          Create\r\n        </button>\r\n      </form>\r\n    </div>\r\n    <Shade visibility={props.visibility} onClick={handleShadeClick} />\r\n  </>\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  visibility: selectCreateChatWindowVisibility(state)\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  toggleCreateChatWindowVisibility: uiActions.toggleCreateChatWindowVisibility,\r\n  setSelectedChatId: chatsActions.setSelectedChatId\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateChatWindow)\r\n","import { useEffect, useRef } from \"react\"\r\n\r\nconst usePrevious = (value) => {\r\n  const ref = useRef()\r\n\r\n  useEffect(() => {\r\n    ref.current = value\r\n  })\r\n\r\n  return ref.current\r\n}\r\n\r\nexport default usePrevious\r\n","import { deleteDoc, doc } from '@firebase/firestore'\r\nimport { db } from 'firebase'\r\nimport { useEffect, useRef } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { selectChatById, selectSelectedChatId } from 'redux/reducers/chatsReducer'\r\nimport { commonActions, selectSearchMessageInputValue } from 'redux/reducers/commonReducer'\r\nimport { selectSearchMessagePanelVisibility, uiActions } from 'redux/reducers/uiReducer'\r\n\r\n\r\nconst ChatHeader = (props) => {\r\n  const searchMessageInputRef = useRef(null)\r\n  const handlerRef = useRef((e) => {\r\n    if (!e.target.contains(searchMessageInputRef.current)) {\r\n      console.log('test')\r\n      props.setSearchMessagePanelVisibility({ to: false })\r\n      removeListener()\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (props.searchMessagePanelVisibility) {\r\n      searchMessageInputRef.current?.focus()\r\n    }\r\n  }, [props.searchMessagePanelVisibility])\r\n\r\n\r\n  const isLastOnlineItem = (index) => {\r\n    return props.selectedChat.onlineList.length === index + 1\r\n  }\r\n\r\n  const deleteCurrentChat = async () => {\r\n    await deleteDoc(doc(db, '/chats' , props.selectedChat.id))\r\n  }\r\n\r\n  const addListener = () => {\r\n    document.addEventListener('click', handlerRef.current)\r\n  }\r\n\r\n  const removeListener = () => {\r\n    document.removeEventListener('click', handlerRef.current)\r\n  }\r\n\r\n  const handleSearchBtnClick = () => {\r\n    props.setSearchMessagePanelVisibility({ to: !props.searchMessagePanelVisibility })\r\n    // addListener()\r\n  }\r\n\r\n  const handleDeleteChatBtnClick = () => {\r\n    deleteCurrentChat()\r\n  }\r\n\r\n  const handleBugerMenuBtnClick = () => {\r\n    props.setSidebarVisibility({ to: true })\r\n  }\r\n\r\n  return (\r\n    <div className=\"chat-header\">\r\n      {/* Search Panel */}\r\n      <div className={`chat-header__search-panel ${!props.searchMessagePanelVisibility && 'chat-header__search-panel--hidden'}`}>\r\n        <input\r\n          placeholder=\"Search message\"\r\n          className=\"chat-header__search-input\"\r\n          value={props.searchMessageInputValue}\r\n          onChange={(e) => props.setSearchMessageInputValue({ to: e.target.value })}\r\n          ref={searchMessageInputRef}\r\n        />\r\n      </div>\r\n\r\n\r\n      {/* Left */}\r\n      <div className=\"chat-header__left\">\r\n        <button className=\"chat-header__btn chat-header__burger-menu-btn\" onClick={handleBugerMenuBtnClick}>\r\n          <span className=\"chat-header__icon chat-header__burger-icon material-icons\">\r\n            menu\r\n          </span>\r\n        </button>\r\n        <img src={props.selectedChat.photoURL} className=\"chat-header__photo\" />\r\n        <span className=\"chat-header__chat-name\">\r\n          {props.selectedChat.name}\r\n        </span>\r\n        <div className=\"chat-header__online-panel\">\r\n          <span className=\"chat-header__online-label\">Online:</span>\r\n          <ul className=\"chat-header__online-list\">\r\n            {\r\n              props.selectedChat.onlineList.map((online, i) => (\r\n                <li className=\"chat-header__online-item\" key={i}>\r\n                  {online}{!isLastOnlineItem(i) ? ',' : null}\r\n                </li>\r\n              ))\r\n            }\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      {/* Right */}\r\n      <div className=\"chat-header__right\">\r\n        <button className=\"chat-header__btn chat-header__search-btn\" type=\"button\" onClick={handleSearchBtnClick}>\r\n          <span className=\"chat-header__search-icon chat-header__icon material-icons-outlined\">\r\n            search\r\n          </span>\r\n        </button>\r\n        <button className=\"chat-header__btn chat-header__delete-btn\" type=\"button\" title=\"Detete chat\" onClick={handleDeleteChatBtnClick}>\r\n          <span className=\"chat-header__delete-icon chat-header__icon material-icons-outlined\">\r\n            delete\r\n          </span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  selectedChat: selectChatById(state, selectSelectedChatId(state)),\r\n  searchMessageInputValue: selectSearchMessageInputValue(state),\r\n  searchMessagePanelVisibility: selectSearchMessagePanelVisibility(state)\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  setSearchMessageInputValue: commonActions.setSearchMessageInputValue,\r\n  toggleSearchMessagePanelVisibility: uiActions.toggleSearchMessagePanelVisibility,\r\n  setSearchMessagePanelVisibility: uiActions.setSearchMessagePanelVisibility,\r\n  setSidebarVisibility: uiActions.setSidebarVisibility\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatHeader)\r\n","import { getDownloadURL, ref } from '@firebase/storage'\r\nimport { storage } from 'firebase'\r\nimport pt from 'prop-types'\r\nimport { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { selectUser } from 'redux/reducers/authReducer'\r\nimport { selectSearchMessageInputValue } from 'redux/reducers/commonReducer'\r\n\r\n\r\nconst MessagesItem = (props) => {\r\n  const [URL, setURL] = useState(null)\r\n  const [isPhotoLoading, setIsPhotoLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    if (props.photoRef) {\r\n      getDownloadURL(ref(storage, props.photoRef)).then((result) => {\r\n        setURL(result)\r\n        setIsPhotoLoading(false)\r\n      })\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <li\r\n      className={`messages-item\r\n        ${!props.belongsToCurrentUser && 'messages-item--reversed'}\r\n        ${props.belongsToCurrentUser ? 'messages-item--align-right' : 'messages-item--align-left'}\r\n      `}\r\n    >\r\n      <div\r\n        className={`messages-item__message\r\n          ${props.belongsToCurrentUser && 'messages-item__message--green'}\r\n          ${props.searchMessageInputValue.trim() && props.text.includes(props.searchMessageInputValue) && 'messages-item__message--blue-border'}\r\n        `}\r\n      >\r\n        <span className=\"messages-item__message-author\">\r\n          {props.author.displayName}\r\n        </span>\r\n        <p className=\"messages-item__message-text\">\r\n          {props.text}\r\n        </p>\r\n        {props.photoRef && !isPhotoLoading && (\r\n          <img src={URL} className=\"messages-item__message-photo\" />\r\n        )}\r\n        {props.photoRef && isPhotoLoading && (\r\n          <div className=\"messages-item__loader\"></div>\r\n        )}\r\n        <span className=\"messages-item__message-created-date\">\r\n          {`${new Date(props.timestamp).getHours()}:${new Date(props.timestamp).getMinutes()}`}\r\n        </span>\r\n      </div>\r\n      <img src={props.author.photoURL} className=\"messages-item__photo\" />\r\n    </li>\r\n  )\r\n}\r\n\r\nMessagesItem.propTypes = {\r\n  text: pt.string.isRequired,\r\n  photoURL: pt.string,\r\n  photoRef: pt.string,\r\n  author: pt.object.isRequired,\r\n  belongsToCurrentUser: pt.bool.isRequired,\r\n  timestamp: pt.number.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: selectUser(state),\r\n  searchMessageInputValue: selectSearchMessageInputValue(state)\r\n})\r\n\r\nconst mapDispatchToProps = {}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MessagesItem)\r\n","import { connect } from 'react-redux'\r\nimport pt from 'prop-types'\r\n\r\n\r\nconst PhotoPreview = (props) => {\r\n  return (\r\n    <div className={`photo-preview ${props.isHidden && 'photo-preview--hidden'}`}>\r\n      <img src={props.photoURL} className=\"photo-preview__photo\" />\r\n      <button className=\"photo-preview__remove-photo-btn\" onClick={props.onDeletePhotoBtnClick} type=\"button\">\r\n        Remove\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({})\r\n\r\nconst mapDispatchToProps = {}\r\n\r\nPhotoPreview.propTypes = {\r\n  photoURL: pt.string,\r\n  isHidden: pt.bool.isRequired,\r\n  onDeletePhotoBtnClick: pt.func.isRequired\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PhotoPreview)\r\n","import { addDoc, collection, doc, serverTimestamp, updateDoc } from '@firebase/firestore'\r\nimport { ref, uploadBytes } from '@firebase/storage'\r\nimport { db, storage } from 'firebase'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { selectUser } from 'redux/reducers/authReducer'\r\nimport { selectSelectedChatId } from 'redux/reducers/chatsReducer'\r\nimport PhotoPreview from './PhotoPreview'\r\n\r\n\r\nconst SendMessageForm = (props) => {\r\n  const [messageInputValue, setMessageInputValue] = useState('')\r\n  const [submitBtnHidden, setSubmitBtnHidden] = useState(true)\r\n  const [fileData, setFileData] = useState(null)\r\n  const [isPhotoPreviewHidden, setIsPhotoPreviewHidden] = useState(true)\r\n  const [file, setFile] = useState(null)\r\n\r\n  const fileInputRef = useRef(null)\r\n  const messageInputRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    if (messageInputValue.trim()) {\r\n      setSubmitBtnHidden(false)\r\n    } else {\r\n      setSubmitBtnHidden(true)\r\n    }\r\n  }, [messageInputValue])\r\n\r\n  useEffect(() => {\r\n    if (fileData) {\r\n      showPhotoPreview()\r\n    } else {\r\n      hidePhotoPreview()\r\n    }\r\n  }, [fileData])\r\n\r\n  const sendMessage = async () => {\r\n    const message = {\r\n      text: messageInputValue,\r\n      author: {\r\n        displayName: props.user.displayName,\r\n        uid: props.user.uid,\r\n        photoURL: props.user.photoURL\r\n      },\r\n      createdDate: serverTimestamp(),\r\n      timestamp: new Date().getTime(),\r\n      photoRef: file ? `/photos/${file.name}` : null\r\n    }\r\n    await addDoc(collection(db, `chats/${props.selectedChatId}/messages`), message)\r\n  }\r\n\r\n  const uploadFile = () => {\r\n    const photoRef = ref(storage, `/photos/${file.name}`)\r\n    uploadBytes(photoRef, file)\r\n  }\r\n\r\n  const updateLastMessage = async () => {\r\n    await updateDoc(doc(db, `/chats/${props.selectedChatId}`), {\r\n      lastMessage: {\r\n        authorDisplayName: props.user.displayName,\r\n        text: messageInputValue\r\n      }\r\n    })\r\n  }\r\n\r\n  const deletePhoto = () => {\r\n    setFileData(null)\r\n    fileInputRef.current.value = null\r\n  }\r\n\r\n  const resetForm = () => {\r\n    setFileData(null)\r\n    setFile(null)\r\n    setMessageInputValue('')\r\n    fileInputRef.current.value = null\r\n  }\r\n\r\n  const hidePhotoPreview = () => {\r\n    setIsPhotoPreviewHidden(true)\r\n  }\r\n\r\n  const showPhotoPreview = () => {\r\n    setIsPhotoPreviewHidden(false)\r\n  }\r\n\r\n  const triggerNativeFileInputClick = () => {\r\n    fileInputRef.current.click()\r\n  }\r\n\r\n  const readFileData = (fileInput) => {\r\n    const reader = new FileReader()\r\n    reader.readAsDataURL(fileInput.files[0])\r\n    reader.onload = () => {\r\n      setFileData(reader.result)\r\n    }\r\n  }\r\n\r\n  const readFile = () => {\r\n    setFile(fileInputRef.current?.files[0])\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    sendMessage()\r\n    if (file) uploadFile()\r\n    updateLastMessage()\r\n    resetForm()\r\n  }\r\n\r\n  const handleSelectPhotoBtnClick = () => {\r\n    triggerNativeFileInputClick()\r\n  }\r\n\r\n  const handleFileInputChange = (e) => {\r\n    readFileData(e.target)\r\n    readFile()\r\n  }\r\n\r\n  const handleDeletePhotoBtnClick = () => {\r\n    deletePhoto()\r\n  }\r\n\r\n  return <>\r\n    <form className=\"send-message-form\" onSubmit={handleSubmit}>\r\n      <PhotoPreview photoURL={fileData} isHidden={isPhotoPreviewHidden} onDeletePhotoBtnClick={handleDeletePhotoBtnClick} />\r\n\r\n      <button className=\"send-message-form__select-photo-btn\" type=\"button\" onClick={handleSelectPhotoBtnClick}>\r\n        <span className={`send-message-form__photo-icon material-icons-outlined ${fileData && 'send-message-form__photo-icon--file--selected'}`}>\r\n          photo_size_select_actual\r\n        </span>\r\n      </button>\r\n\r\n      <div className=\"send-message-form__message-input-panel\">\r\n        <input\r\n          className=\"send-message-form__message-input\"\r\n          value={messageInputValue}\r\n          onChange={(e) => setMessageInputValue(e.target.value)}\r\n          placeholder=\"Type message\"\r\n          ref={messageInputRef}\r\n        />\r\n        <button type=\"submit\" className={`send-message-form__submit-btn ${submitBtnHidden && 'send-message-form__submit-btn--hidden'}`}>\r\n          <span className=\"send-message-form__send-icon material-icons\">\r\n            send\r\n          </span>\r\n        </button>\r\n      </div>\r\n\r\n    </form>\r\n\r\n    <input type=\"file\" hidden ref={fileInputRef} onChange={handleFileInputChange} />\r\n  </>\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  selectedChatId: selectSelectedChatId(state),\r\n  user: selectUser(state)\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SendMessageForm)\r\n","import { arrayRemove, arrayUnion, collection, doc, onSnapshot, orderBy, query, updateDoc } from '@firebase/firestore'\r\nimport { db } from 'firebase'\r\nimport usePrevious from 'hooks/usePrevious'\r\nimport { useEffect, useRef } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { selectUser } from 'redux/reducers/authReducer'\r\nimport { selectSelectedChatId } from 'redux/reducers/chatsReducer'\r\nimport { selectSearchMessageInputValue } from 'redux/reducers/commonReducer'\r\nimport { messagesActions, selectIsMessagesLoading, selectMessages } from 'redux/reducers/messagesReducer'\r\nimport ChatHeader from './ChatHeader'\r\nimport MessagesItem from './MessagesItem'\r\nimport SendMessageForm from './SendMessageForm'\r\n\r\n\r\nconst Chat = (props) => {\r\n  const previousSelectedChatId = usePrevious(props.selectedChatId)\r\n\r\n  const chatBodyRef = useRef(null)\r\n\r\n  useEffect(() => props.setIsLoading({ to: true }), [props.selectedChatId])\r\n\r\n  useEffect(() => {\r\n    props.setMessages({ list: [] })\r\n    const q = query(collection(db, `chats/${props.selectedChatId}/messages`), orderBy('createdDate'))\r\n    const unsubscribe = onSnapshot(q, (snapshot) => {\r\n      const messages = []\r\n      snapshot.forEach((doc) => {\r\n        const data = doc.data()\r\n        const message = {\r\n          id: doc.id,\r\n          text: data.text,\r\n          photoRef: data.photoRef,\r\n          author: {\r\n            displayName: data.author.displayName,\r\n            uid: data.author.uid,\r\n            photoURL: data.author.photoURL\r\n          },\r\n          timestamp: data.timestamp\r\n        }\r\n        messages.push(message)\r\n      })\r\n      props.setMessages({ list: messages })\r\n      props.setIsLoading({ to: false })\r\n    })\r\n\r\n    return () => unsubscribe()\r\n  }, [props.selectedChatId])\r\n\r\n  useEffect(async () => {\r\n    await updateDoc(doc(db, `/chats/${props.selectedChatId}`), {\r\n      onlineList: arrayUnion(props.user.displayName)\r\n    })\r\n    if (previousSelectedChatId) {\r\n      await updateDoc(doc(db, `/chats/${previousSelectedChatId}`), {\r\n        onlineList: arrayRemove(props.user.displayName)\r\n      })\r\n    }\r\n  }, [props.selectedChatId])\r\n\r\n  useEffect(() => {\r\n    chatBodyRef.current.scrollTo(0, chatBodyRef.current.scrollHeight)\r\n  }, [props.messages])\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <ChatHeader />\r\n\r\n      <div className=\"chat__body\" ref={chatBodyRef}>\r\n        {props.isLoading && <div className=\"chat__loader\" />}\r\n        <ul className=\"chat__messages-list\">\r\n          {\r\n            props.messages.map((message) => (\r\n              <MessagesItem\r\n                key={message.id}\r\n                text={message.text}\r\n                photoRef={message.photoRef}\r\n                author={message.author}\r\n                belongsToCurrentUser={message.author.uid === props.user.uid}\r\n                timestamp={message.timestamp}\r\n              />\r\n            ))\r\n          }\r\n        </ul>\r\n      </div>\r\n\r\n      <SendMessageForm />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLoading: selectIsMessagesLoading(state),\r\n  messages: selectMessages(state),\r\n  selectedChatId: selectSelectedChatId(state),\r\n  user: selectUser(state),\r\n  searchMessageInputValue: selectSearchMessageInputValue(state)\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  setIsLoading: messagesActions.setIsLoading,\r\n  setMessages: messagesActions.setMessages\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Chat)\r\n","import { connect } from \"react-redux\"\r\nimport { selectSidebarVisibility, uiActions } from \"redux/reducers/uiReducer\"\r\n\r\nconst Intro = (props) => {\r\n  \r\n  const handleSelectChatBtnClick = () => {\r\n    props.toggleSidebarVisibility()\r\n  }\r\n\r\n  return (\r\n    <div className={'intro'}>\r\n      <img src=\"https://web.telegram.org/z/favicon.svg\" className={'intro__logo'} />\r\n      <h1 className={'intro__title h4'}>\r\n        Welcome to Telegram clone\r\n      </h1>\r\n      <button className=\"intro__select-chat-btn\" onClick={handleSelectChatBtnClick}>\r\n        Select chat\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  sidebarVisibility: selectSidebarVisibility(state)\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  toggleSidebarVisibility: uiActions.toggleSidebarVisibility\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Intro)\r\n","import pt from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { chatsActions } from 'redux/reducers/chatsReducer'\r\nimport { uiActions } from 'redux/reducers/uiReducer'\r\n\r\n\r\nconst ChatsItem = (props) => {\r\n\r\n  const handleChatItemClick = () => {\r\n    props.setSelectedChatId({ to: props.id })\r\n    props.setSidebarVisibility({ to: false })\r\n  }\r\n\r\n  return (\r\n    <li className={`chats-item ${props.isActive && 'chats-item--selected'}`} onClick={handleChatItemClick}>\r\n      <img \r\n        src={props.photoURL}\r\n        className=\"chats-item__photo\"\r\n      />\r\n      <span className=\"chats-item__name\">\r\n        {props.name}\r\n      </span>\r\n      <span className=\"chats-item__last-message\">\r\n        {props.lastMessage ? <>\r\n          <span className=\"chats-item__last-message-author\">\r\n            {props.lastMessage.authorDisplayName}: {' '}\r\n          </span>\r\n          <span className=\"chats-item__last-message-text\">\r\n            {props.lastMessage.text}\r\n          </span>\r\n        </> : 'Tap to open'}\r\n      </span>\r\n    </li>\r\n  )\r\n}\r\n\r\nChatsItem.propTypes = {\r\n  id: pt.string.isRequired,\r\n  name: pt.string.isRequired,\r\n  photoURL: pt.string.isRequired,\r\n  lastMessage: pt.shape({\r\n    text: pt.string,\r\n    authorDisplayName: pt.string\r\n  }),\r\n  isActive: pt.bool.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  setSelectedChatId: chatsActions.setSelectedChatId,\r\n  setSidebarVisibility: uiActions.setSidebarVisibility\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatsItem)\r\n","import { signOut } from '@firebase/auth'\r\nimport { collection, onSnapshot, query } from '@firebase/firestore'\r\nimport { auth, db } from 'firebase'\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { selectUser } from 'redux/reducers/authReducer'\r\nimport { chatsActions, selectChatsByNameIncludes, selectIsChatsLoading, selectSelectedChatId } from 'redux/reducers/chatsReducer'\r\nimport { commonActions, selectSearchChatInputValue } from 'redux/reducers/commonReducer'\r\nimport { selectSidebarVisibility, uiActions } from 'redux/reducers/uiReducer'\r\nimport ChatsItem from './ChatsItem'\r\nimport Shade from './Shade'\r\n\r\n\r\nconst Sidebar = (props) => {\r\n  const searchPanelRef = useRef(null)\r\n  const searchInput = useRef(null)\r\n\r\n  const [isSearchPanelActive, setIsSearchPanelActive] = useState(false)\r\n\r\n  useEffect(() => {\r\n    props.setIsLoading({ to: true })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('click', (e) => {\r\n      if (!e.target.contains(searchInput.current)) {\r\n        setIsSearchPanelActive(false)\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const q = query(collection(db, 'chats'))\r\n\r\n    const unsubscribe = onSnapshot(q, (snapshot) => {\r\n      const chats = []\r\n      snapshot.forEach((doc) => {\r\n        const { id } = doc\r\n        const { name, lastMessage, onlineList, photoURL } = doc.data()\r\n        chats.push({ id, name, lastMessage, onlineList, photoURL })\r\n      })\r\n      props.setChats({ list: chats })\r\n      props.setIsLoading({ to: false })\r\n    })\r\n    \r\n    return () => unsubscribe()\r\n  }, [])\r\n\r\n  const closeSidebar = () => {\r\n    props.setSidebarVisibility({ to: false })\r\n  }\r\n\r\n  const handleSearchInputFocus = (e) => {\r\n    setIsSearchPanelActive(true)\r\n  }\r\n\r\n  const handleAddChatBtnClick = () => {\r\n    props.toggleCreateChatWindowVisibility()\r\n    closeSidebar()\r\n  }\r\n  \r\n  const handleLogoutBtnClick = () => {\r\n    signOut(auth)\r\n  }\r\n\r\n  const handleShadeClick = () => {\r\n    closeSidebar()\r\n  }\r\n\r\n  return <>\r\n    <div className={`sidebar ${!props.visibility && 'sidebar--hidden'}`}>\r\n      {/* Header */}\r\n      <div className=\"sidebar__header\">\r\n        <div className=\"sidebar__header-left\">\r\n          <img className=\"sidebar__header-avatar\" src={props.user.photoURL} />\r\n          <span className=\"sidebar__header-display-name\">\r\n            {props.user.displayName}\r\n          </span>\r\n          <span className=\"sidebar__header-status\">\r\n            Online\r\n          </span>\r\n        </div>\r\n        <button className=\"sidebar__logout-btn\" onClick={handleLogoutBtnClick}>\r\n          <span className=\"sidebar__logout-icon material-icons-outlined\">\r\n            logout\r\n          </span>\r\n        </button>\r\n      </div>\r\n      {/* Search */}\r\n      <div className=\"sidebar__search-panel-wrapper\">\r\n        <div className={`sidebar__search-panel ${isSearchPanelActive && 'sidebar__search-panel--active'}`} ref={searchPanelRef}>\r\n          <span className=\"sidebar__search-icon material-icons-outlined\">\r\n            search\r\n          </span>\r\n          <input\r\n            ref={searchInput}\r\n            className=\"sidebar__search-input\"\r\n            placeholder=\"Search chat\"\r\n            value={props.searchChatInputValue}\r\n            onChange={(e) => props.setSearchChatInputValue({ to: e.target.value })}\r\n            onFocus={handleSearchInputFocus}\r\n          />\r\n        </div>\r\n      </div>\r\n      {/* Chats */}\r\n      {props.isLoading && <div className=\"sidebar__loader\" />}\r\n      <ul className=\"sidebar__chats-list\">\r\n        {\r\n          props.filteredChats.map((chat) => (\r\n            <ChatsItem\r\n              key={chat.id}\r\n              id={chat.id}\r\n              name={chat.name}\r\n              lastMessage={chat.lastMessage}\r\n              photoURL={chat.photoURL}\r\n              isActive={props.selectedChatId === chat.id ? true : false}\r\n            />\r\n          ))\r\n        }\r\n      </ul>\r\n      {/* Add Chat btn */}\r\n      <button className=\"sidebar__add-chat-btn\" type=\"button\" onClick={handleAddChatBtnClick}>\r\n        Add new chat\r\n      </button>\r\n    </div>\r\n\r\n    <Shade visibility={props.visibility} onClick={handleShadeClick} />\r\n  </>\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: selectUser(state),\r\n  selectedChatId: selectSelectedChatId(state),\r\n  isLoading: selectIsChatsLoading(state),\r\n  filteredChats: selectChatsByNameIncludes(state, selectSearchChatInputValue(state)),\r\n  searchChatInputValue: selectSearchChatInputValue(state),\r\n  visibility: selectSidebarVisibility(state)\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  toggleCreateChatWindowVisibility: uiActions.toggleCreateChatWindowVisibility,\r\n  setIsLoading: chatsActions.setIsLoading,\r\n  setSearchChatInputValue: commonActions.setSearchChatInputValue,\r\n  setChats: chatsActions.setChats,\r\n  toggleVisibility: uiActions.toggleSidebarVisibility,\r\n  setSidebarVisibility: uiActions.setSidebarVisibility\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar)\r\n","import { connect } from 'react-redux'\r\nimport { selectIsAuthenticated } from 'redux/reducers/authReducer'\r\nimport { selectChatById, selectSelectedChatId } from 'redux/reducers/chatsReducer'\r\nimport Chat from './Chat'\r\nimport Intro from './Intro'\r\nimport Sidebar from './Sidebar'\r\n\r\n\r\nconst HomePage = (props) => {\r\n  if (!props.isAuthenticated) return null\r\n\r\n  return (\r\n    <div className={'home-page'}>\r\n      <div className={'home-page__body'}>\r\n        <Sidebar />\r\n        {props.selectedChat ? <Chat /> : <Intro />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: selectIsAuthenticated(state),\r\n  selectedChat: selectChatById(state, selectSelectedChatId(state))\r\n})\r\n\r\nconst mapDispatchToProps = {}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage)\r\n","import { connect } from 'react-redux'\r\nimport { selectIsAuthenticated } from 'redux/reducers/authReducer'\r\nimport { signInWithPopup } from '@firebase/auth'\r\nimport { auth, googleProvider } from 'firebase'\r\n\r\n\r\nconst LoginPage = (props) => {\r\n  if (props.isAuthenticated) return null\r\n\r\n  const handleLogin = () => {\r\n    signInWithPopup(auth, googleProvider)\r\n  }\r\n\r\n  return (\r\n    <div className={'login-page'}>\r\n      <div className={'login-page__body'}>\r\n        <img className={'login-page__logo'} src={'https://web.telegram.org/z/favicon.svg'} />\r\n        <h1 className={'login-page__title h4'}>\r\n          Sign in to Telegram\r\n        </h1>\r\n        <button className={'login-page__sign-in-btn'} onClick={handleLogin}>\r\n          Sign in with Google\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: selectIsAuthenticated(state)\r\n})\r\n\r\nconst mapDispatchToProps = {}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage)\r\n","import 'scss/index.scss'\r\nimport { onAuthStateChanged } from '@firebase/auth'\r\nimport { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect, Route, Switch, useHistory } from 'react-router'\r\nimport CreateChatWindow from './CreateChatWindow'\r\nimport HomePage from './HomePage'\r\nimport LoginPage from './LoginPage'\r\nimport { auth, db } from 'firebase'\r\nimport { authActions, selectUser } from 'redux/reducers/authReducer'\r\nimport { selectSelectedChatId } from 'redux/reducers/chatsReducer'\r\nimport { arrayRemove, doc, updateDoc } from '@firebase/firestore'\r\n\r\n\r\nconst App = (props) => {\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    onAuthStateChanged(auth, (user) => {\r\n      if (user) {\r\n        const { uid, photoURL, displayName } = user\r\n        props.login({ uid, photoURL, displayName })\r\n        history.push('/home')\r\n      } else {\r\n        props.logout()\r\n        history.push('/login')\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('beforeunload', async (e) => {\r\n      await updateDoc(doc(db, `/chats/${props.selectedChatId}`), {\r\n        onlineList: arrayRemove(props.user.displayName)\r\n      })\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('error', (e) => {\r\n      alert('Error')\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <div className={'app'}>\r\n      <Switch>\r\n\r\n        <Route path={'/'} exact>\r\n          <Redirect to={'/home'} />\r\n        </Route>\r\n\r\n        <Route path={'/login'}>\r\n          <LoginPage />\r\n        </Route>\r\n\r\n        <Route path={'/home'}>\r\n          <HomePage />\r\n        </Route>\r\n\r\n      </Switch>\r\n\r\n      <CreateChatWindow />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  selectedChatId: selectSelectedChatId(state),\r\n  user: selectUser(state)\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  login: authActions.login,\r\n  logout: authActions.logout\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport store from 'redux/store';\r\nimport App from './components/App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter basename={'/telegram-clone'}>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}